name: C++ CI

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'Dockerfile'

concurrency:
  group: build-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2025]
        configuration: [Debug, Release]
        target: [library, tests]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    env:
      BUILD_CONFIGURATION: ${{ matrix.configuration }}
      CMAKE_GENERATOR: Ninja
      VCPKG_FEATURE_FLAGS: manifests
      VCPKG_DEFAULT_TRIPLET: x64-windows

      # --- Binary caching: NuGet feed hosted on GitHub Packages ---
      VCPKG_BINARY_SOURCES: clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite
      VCPKG_NUGET_REPOSITORY: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      VCPKG_NUGET_USER: ${{ github.repository_owner }}
      VCPKG_NUGET_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      # ---------- Linux Build ----------
      - name: Install dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt install -y cmake ninja-build g++ \
            libboost-dev libboost-filesystem-dev libboost-program-options-dev
          if [ "${{ matrix.target }}" = "tests" ]; then
            sudo apt install -y libyaml-cpp-dev valgrind
          fi

      - name: Build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cmake -S . -B build -G Ninja \
            -D CMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} \
            -D VERIFIER_ENABLE_TESTS=$([ "${{ matrix.target }}" = "tests" ] && echo ON || echo OFF)
          cmake --build build -- -j $(nproc)

      - name: Run unit tests (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'tests' }}
        run: ./build/tests -d yes

      - name: Memory leak test (Linux Debug only)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'tests' && matrix.configuration == 'Debug' }}
        run: >
          valgrind --leak-check=full --errors-for-leak-kinds=all
          --show-leak-kinds=all --error-exitcode=1
          ./build/check ebpf-samples/cilium/bpf_xdp_snat_linux_v1.o 2/1

      # ---------- Windows Build ----------
      - name: Enable MSVC Developer Command Prompt
        if: ${{ matrix.os == 'windows-2025' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install vcpkg (latest manifest mode)
        if: ${{ matrix.os == 'windows-2025' }}
        run: |
          git clone --depth=1 https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat -disableMetrics
        shell: pwsh

      - name: Configure CMake (Windows)
        if: ${{ matrix.os == 'windows-2025' }}
        run: |
          $toolchain = "vcpkg/scripts/buildsystems/vcpkg.cmake"
          cmake -S . -B build -G "${env:CMAKE_GENERATOR}" `
            -D CMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} `
            -D CMAKE_TOOLCHAIN_FILE=$toolchain `
            -D VERIFIER_ENABLE_TESTS=$([bool](${env:matrix_target} -eq 'tests'))
        shell: pwsh

      - name: Cache vcpkg artifacts
        if: ${{ matrix.os == 'windows-2025' }}
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/downloads
            vcpkg/buildtrees
            vcpkg/installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}

      - name: Build (Windows)
        if: ${{ matrix.os == 'windows-2025' }}
        run: cmake --build build --config ${{ env.BUILD_CONFIGURATION }} --parallel
        shell: pwsh

      - name: Run unit tests (Windows)
        if: ${{ matrix.os == 'windows-2025' && matrix.target == 'tests' }}
        working-directory: build/${{ env.BUILD_CONFIGURATION }}
        run: .\tests.exe -d yes
        shell: pwsh
