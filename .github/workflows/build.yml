name: C++ CI

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'Dockerfile'

concurrency:
  group: build-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build_ubuntu:
    strategy:
      matrix:
        configurations: [Debug, Release]
        target: [tests, library]
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGURATION: ${{ matrix.configurations }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libboost-dev libboost-filesystem-dev libboost-program-options-dev
          if [ "${{ matrix.target }}" = "tests" ]; then
            sudo apt install -y libyaml-cpp-dev valgrind
          fi

      - name: Build
        run: |
          mkdir build
          if [ "${{ matrix.target }}" = "library" ]; then
            cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} -DVERIFIER_ENABLE_TESTS=OFF
          else
            cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} -DVERIFIER_ENABLE_TESTS=ON
          fi
          cmake --build build -j $(nproc)

      - name: Run unit tests
        if: ${{ matrix.target == 'tests' }}
        run: ./tests -d yes

      - name: Test for memory leaks
        if: ${{ matrix.target == 'tests' && matrix.configurations == 'Debug' }}
        run: >
          valgrind --leak-check=full --errors-for-leak-kinds=all
          --show-leak-kinds=all --error-exitcode=1
          ./check ebpf-samples/cilium/bpf_xdp_snat_linux_v1.o 2/1

  build_windows:
    runs-on: windows-2025
    strategy:
      matrix:
        configurations: [Debug, Release]
        target: [tests, library]
    env:
      BUILD_CONFIGURATION: ${{ matrix.configurations }}
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_ARCHITECTURE: x64
      VCPKG_FEATURE_FLAGS: manifests
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - uses: lukka/get-cmake@latest
      - uses: mozilla-actions/sccache-action@v0.0.9
        env:
          SCCACHE_GHA_ENABLED: "true"

      # âœ… ensures vcpkg is available at $VCPKG_ROOT
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgConfigurationJsonGlob: '**/vcpkg-configuration.json'
          runVcpkgInstall: true
          vcpkgGitCommitId: 4334d8b4c8916018600212ab4dd4bbdc343065d1

      - name: Configure
        shell: pwsh
        run: |
          $toolchain = "$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
          cmake -S . -B build -A $env:CMAKE_ARCHITECTURE `
            -G "$env:CMAKE_GENERATOR" `
            -D CMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} `
            -D CMAKE_TOOLCHAIN_FILE=$toolchain `
            -D CMAKE_C_COMPILER_LAUNCHER=sccache `
            -D CMAKE_CXX_COMPILER_LAUNCHER=sccache `
            -D VERIFIER_ENABLE_TESTS=$([bool](${env:matrix_target} -eq 'tests'))

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_CONFIGURATION }} --parallel

      - name: Run tests
        if: ${{ matrix.target == 'tests' }}
        working-directory: build
        run: .\${{ env.BUILD_CONFIGURATION }}\tests.exe --reporter compact
