name: C++ CI

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'Dockerfile'

concurrency:
  group: build-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2025]
        configuration: [Debug, Release]
        target: [library, tests]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    env:
      BUILD_CONFIGURATION: ${{ matrix.configuration }}
      CMAKE_GENERATOR: Ninja
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      # ---------- Linux Build ----------
      - name: Install dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt install -y cmake ninja-build g++ \
            libboost-dev libboost-filesystem-dev libboost-program-options-dev
          if [ "${{ matrix.target }}" = "tests" ]; then
            sudo apt install -y libyaml-cpp-dev valgrind
          fi

      - name: Build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cmake -S . -B build -G Ninja \
            -D CMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} \
            -D VERIFIER_ENABLE_TESTS=$([ "${{ matrix.target }}" = "tests" ] && echo ON || echo OFF)
          cmake --build build -- -j $(nproc)

      - name: Run unit tests (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'tests' }}
        run: ./build/tests -d yes

      - name: Memory leak test (Linux Debug only)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'tests' && matrix.configuration == 'Debug' }}
        run: >
          valgrind --leak-check=full --errors-for-leak-kinds=all
          --show-leak-kinds=all --error-exitcode=1
          ./build/check ebpf-samples/cilium/bpf_xdp_snat_linux_v1.o 2/1

      # ---------- Windows Build ----------
      - name: Cache Boost packages
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: D:\a\prevail\prevail\build\packages
          key: boost-${{ runner.os }}-1.87.0

      - name: Install Boost (NuGet prebuilt)
        if: ${{ matrix.os == 'windows-2025' && steps.cache-boost.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          $root = "D:\a\prevail\prevail\build\packages"
          New-Item -ItemType Directory -Force -Path $root | Out-Null

          nuget install boost -Version 1.87.0 -ExcludeVersion -OutputDirectory $root
          # Prevent bpf_conformance from reinstalling boost packages
          nuget install boost_filesystem-vc143 -Version 1.87.0 -ExcludeVersion -OutputDirectory $root
          nuget install boost_program_options-vc143 -Version 1.87.0 -ExcludeVersion -OutputDirectory $root

          # Generate a minimal CMake config so find_package(Boost CONFIG) works
          $boostRoot = "$root/boost-vc143/lib/native"
          $cmakeDir  = "$boostRoot/lib/cmake/Boost"
          New-Item -ItemType Directory -Force -Path $cmakeDir | Out-Null

          @"
          set(Boost_VERSION 1.87.0)
          set(Boost_INCLUDE_DIR `"\${CMAKE_CURRENT_LIST_DIR}/../../../include`")
          set(Boost_LIBRARY_DIR `"\${CMAKE_CURRENT_LIST_DIR}/../../../lib`")
          set(Boost_INCLUDE_DIRS \${Boost_INCLUDE_DIR})
          set(Boost_LIBRARY_DIRS \${Boost_LIBRARY_DIR})
          add_library(Boost::process INTERFACE IMPORTED)
          target_include_directories(Boost::process INTERFACE \${Boost_INCLUDE_DIR})
          "@ | Set-Content -Path "$cmakeDir/BoostConfig.cmake"

      - name: Configure CMake (Windows)
        if: ${{ matrix.os == 'windows-2025' }}
        shell: pwsh
        run: |
          $boostDir = "D:\a\prevail\prevail\build\packages\boost-vc143\lib\native\lib\cmake\Boost"
          $enableTests = if ($env:matrix_target -eq 'tests') {'ON'} else {'OFF'}
          cmake -S . -B build `
                -G "Visual Studio 17 2022" `
                -D CMAKE_BUILD_TYPE=${{ env.BUILD_CONFIGURATION }} `
                -D CMAKE_PREFIX_PATH="$boostDir/lib/cmake/Boost" `
                -D Boost_DIR="$boostDir/lib/cmake/Boost" `
                -D VERIFIER_ENABLE_TESTS=$enableTests

      - name: Build (Windows)
        if: ${{ matrix.os == 'windows-2025' }}
        shell: pwsh
        run: cmake --build build --parallel

      - name: Run unit tests (Windows)
        if: ${{ matrix.os == 'windows-2025' && matrix.target == 'tests' }}
        run: .\tests.exe -d yes
        shell: pwsh
